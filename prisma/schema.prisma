// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(cuid())
  name          String
  email         String?            @unique
  emailVerified DateTime?
  image         String?
  role          String             @default("USER")
  prefs         UserPreferences[]
  accounts      Account[]
  sessions      Session[]
  bans          UserBans[]
  links         ShortLinks[]
  collections   LinkCollections[]
  reports       LinkReports[]
  linkHistory   ShortLinkHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPreferences {
  id     String @id @default(cuid())
  usr    User   @relation(fields: [userId], references: [id])
  userId String @unique

  showUsernameOnCheck      Boolean @default(false)
  logErrorsForDevelopement Boolean @default(true)
  isProfilePublic          Boolean @default(false)

  lastExportDate DateTime?
  lastImportDate DateTime?

  isOnboardingComplete Boolean @default(false)
  markForDeletion      Boolean @default(false)

  lastUpdated DateTime @default(now()) @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShortLinks {
  id   Int     @id @default(autoincrement())
  name String?
  slug String  @unique
  link String

  metaName     String?
  metaDesc     String?
  metaIconUrl  String?
  metaImageUrl String?

  createdAt DateTime  @default(now())
  expiresAt DateTime?

  active     Boolean   @default(true)
  usageLimit Int?
  disabledAt DateTime?

  usage Int @default(0)

  creator   User?   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String?
  nonAuthId String?

  reports     LinkReports[]
  visits      ShortLinkHistory[]
  collections LinkCollections[]
}

model LinkCollections {
  id          String  @id @default(cuid())
  name        String
  description String?
  emoIcon     String?

  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  createDate  DateTime @default(now())
  lastUpdated DateTime @updatedAt

  isPublic   Boolean @default(false)
  publicSlug String  @unique

  links ShortLinks[]
}

model LinkReports {
  id            Int     @id @default(autoincrement())
  user          User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?
  nonMemberUUID String?

  reportUrl     ShortLinks @relation(fields: [reportUrlSlug], references: [slug], onDelete: Cascade)
  reportUrlSlug String
  reportDesc    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reportProcessed Boolean @default(false)
}

model UserBans {
  id          Int    @id @default(autoincrement())
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  ModeratorId String

  reason String
  type   String

  bannedAt    DateTime? @default(now())
  bannedUntil DateTime?
  isActive    Boolean   @default(true)

  isAppeal      Boolean   @default(false)
  appealDate    DateTime?
  appealContent String?
  isAApproved   Boolean?
}

model Announcements {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  isActive    Boolean  @default(true)
  title       String
  description String
  url         String?
}

model ShortLinkHistory {
  id             String     @id @default(cuid())
  date           DateTime   @default(now())
  user           User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?
  unAuthClientId String?
  link           ShortLinks @relation(fields: [linkSlug], references: [slug], onDelete: Cascade)
  linkSlug       String
  visitorCountry String     @default("Unknown")

  @@index([userId, linkSlug])
}
