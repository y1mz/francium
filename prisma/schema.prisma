// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(cuid())
  name          String            @unique
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  role          String            @default("USER")
  isBanned      Boolean           @default(false)
  prefs         UserPreferences[]
  accounts      Account[]
  sessions      Session[]
  bans          UserBans[]
  links         ShortLinks[]
  reports       LinkReports[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPreferences {
  id     String @id @default(cuid())
  usr    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  showUsernameOnCheck      Boolean @default(false)
  logErrorsForDevelopement Boolean @default(true)

  lastExportDate DateTime?
  lastImportDate DateTime?

  isNewUser            Boolean @default(true)
  markForDeletion      Boolean @default(false)
  isOnboardingComplete Boolean @default(false)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShortLinks {
  id   Int     @id @default(autoincrement())
  name String?
  slug String  @unique
  link String

  metaName     String?
  metaDesc     String?
  metaIconUrl  String?
  metaImageUrl String?

  createdAt DateTime  @default(now())
  expiresAt DateTime?

  active         Boolean   @default(true)
  disabledReason String?
  disabledBy     String?
  disabledAt     DateTime?
  isAuthorPublic Boolean?

  usage Int @default(0)

  creator   User?   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String?
  nonAuthId String?

  reports LinkReports[]
}

model LinkReports {
  id            Int     @id @default(autoincrement())
  user          User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?
  nonMemberUUID String?

  reportUrl     ShortLinks @relation(fields: [reportUrlSlug], references: [slug], onDelete: Cascade)
  reportUrlSlug String
  reportDesc    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reportProcessed Boolean @default(false)
}

model UserBans {
  id          Int     @id @default(autoincrement())
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String  @unique
  adminUserId String?

  reason String
  type   String

  bannedAt    DateTime @default(now())
  bannedUntil DateTime
}

model Announcements {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  isActive    Boolean  @default(true)
  title       String
  description String
  url         String?
}
